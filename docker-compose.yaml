services:
    postgresql:
        container_name: e-app-psql
        image: postgres:16.3
        restart: unless-stopped
        ports:
            - "5430:5432"
        volumes:
            - postgresql_data:/var/lib/postgresql/data
        environment:
            POSTGRES_USER: root
            POSTGRES_PASSWORD: pass
            POSTGRES_DB: mydb
            PGDATA: /var/lib/postgresql/data
        healthcheck:
            test: pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB
            interval: 10s
            timeout: 5s
            start_period: 10s
            retries: 5
        networks:
            - microservices-net

    pgadmin:
        container_name: e-app-pgadm
        image: dpage/pgadmin4:8.10
        restart: always
        ports:
            - "5050:80"
        volumes:
            - pgadmin_data:/var/lib/pgadmin
        environment:
            PGADMIN_DEFAULT_EMAIL: admin@admin.com
            PGADMIN_DEFAULT_PASSWORD: root
            PGADMIN_CONFIG_SERVER_MODE: "False"
            PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "False"
        healthcheck:
            test: wget --no-verbose --tries=1 --spider http://localhost:80/misc/ping || exit -1
            interval: 10s
            timeout: 5s
            start_period: 10s
            retries: 5
        depends_on:
            - postgresql
        networks:
            - microservices-net

    mongo:
        container_name: e-app-mongo_db
        image: mongo:7.0.12
        restart: "no"
        ports:
            - "27019:27017"
        volumes:
            - mongodb_data:/data/db
        environment:
            MONGO_INITDB_ROOT_USERNAME: root
            MONGO_INITDB_ROOT_PASSWORD: pass
            MONGO_INITDB_DATABASE: mydb
        healthcheck:
            test: echo 'db.runCommand({serverStatus:1}).ok' | mongosh admin -u $$MONGO_INITDB_ROOT_USERNAME -p $$MONGO_INITDB_ROOT_PASSWORD --quiet | grep 1
            interval: 10s
            timeout: 5s
            start_period: 10s
            retries: 1

    mongo-express:
        container_name: e-app-mongo-expr
        image: mongo-express:1.0.2
        restart: always
        ports:
            - "8081:8081"
        environment:
            ME_CONFIG_BASICAUTH_USERNAME: root
            ME_CONFIG_BASICAUTH_PASSWORD: root
            ME_CONFIG_MONGODB_URL: mongodb://root:pass@mongo:27017/
        healthcheck:
            test: wget --no-verbose --tries=1 --spider http://localhost:8081/status || exit -1
            interval: 10s
            timeout: 5s
            start_period: 60s
            retries: 5
        depends_on:
            - mongo

    zookeeper:
        image: confluentinc/cp-zookeeper:latest
        container_name: e-app-zookeeper
        environment:
            ZOOKEEPER_SERVER_ID: 1
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_TICK_TIME: 2000
        ports:
            - "22181:2181"
        networks:
            - microservices-net

    kafka:
        image: confluentinc/cp-kafka:latest
        container_name: e-app-kafka
        ports:
            - "9092:9092"
        depends_on:
            - zookeeper
        environment:
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
        networks:
            - microservices-net

    mail-dev:
        container_name: e-app-mail-dev
        image: maildev/maildev
        ports:
            - 1080:1080
            - 1025:1025

    zipkin:
        container_name: e-app-zipkin
        image: openzipkin/zipkin
        ports:
            - 9411:9411
        networks:
            - microservices-net

networks:
    microservices-net:
        driver: bridge

volumes:
    postgresql_data:
    pgadmin_data:
    zookeeper_data:
    kafka_data:
    mongodb_data: